var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"CurrentModule = BayesianDiscovery","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [BayesianDiscovery]","category":"page"},{"location":"api/#BayesianDiscovery.Posterior","page":"API","title":"BayesianDiscovery.Posterior","text":"Posterior Struct\n\nInitiates a structure of class Posterior to hold posterior samples\n\nArguments\n\n\n\n\n\n","category":"type"},{"location":"api/#BayesianDiscovery.DEtection-Tuple{Array{Float64, 3}, Vector, Vector, Int64, Int64, Int64, Int64, Float64, Float64, Function, Function, Vector{String}, Vector{String}}","page":"API","title":"BayesianDiscovery.DEtection","text":"DEtection(Y, SpaceStep, TimeStep, νS, νT, bufferSpace, bufferTime, batchSpace, batchTime, learning_rate, v0, v1, Λ, Λnames)\n\nDEtection sampler function. Can accept missing values in the input data argument. Returns the model, parameters, and posterior values. The model are the model settings. The parameters are the final value of the parameters in from the sampler. The posterior are the saved posterior values.\n\nConsider the function U_t = M(U U_x U_y U_xy ). DEtection() is used to determine M given a library of potential values, Λ(U, ∂U), to search over.  Within the function, partial derivatives are denoted as ΔU_t ΔU_x ΔU_y ΔU_xx  ΔU_xy , so a potential function could be\n\nfunction Λ(U, ∂U){\n  u = U[1]\n  u_x = ∂U[1]\n  u_y = ∂U[2]\n\n  return [u, u_x, u_y, u*u_x, u*u_y]\n}\n\nTo make the function identify the correct partial derivatives, the argument that are passed into ∂U, Λnames, are required. For the example above, Λnames = [ΔU_x, ΔU_y] because the function Λ uses the partial derivatives U_x and U_t.\n\nIf you want to add covariates to the function, a possible Λ(U, ∂U, X) is\n\nfunction Λ(U, ∂U, X){\n  u = U[1]\n  u_x = ∂U[1]\n  u_y = ∂U[2]\n  x1 = X[1]\n  x2 = X[2]\n\n  return [u, u_x, u_y, u*u_x, u*u_y, x1, x2, u*x1, u_x*x2]\n}\n\nwhere Λnames = [ΔU_x, ΔU_y].\n\nRequired Arguments (in order)\n\nY: Input data. Needs to be Array{Float64, 3} or Array{Union{Missing, Float64}, 3} where the dimensions are Space, Time, Components\nSpaceStep: of type StepRangeLen (range function). For example, range(-1, 1, step = 0.1) for 1 dimension and [range(-1, 1, step = 0.1), range(-1, 1, step = 0.1)] for 2.\nTimeStep: of type StepRangeLen (range function). For example, range(-1, 1, step = 0.1).\nνS::Int or νS::Vector{Int}: Number of spatial basis functions. \nνT::Int: Number of temporal basis functions\nbatchSpace::Int: \nbatchTime::Int: \nlearning_rate::Float64: \nv0::Float64: \nv1::Float64: \nΛ::Function: \nΛnames::Vector{String}: \n\nOptional Arguments\n\nresponse = \"ΔUt\": Order of the temporal derivative (default first order). Use \"ΔUtt\" for second and so on.\ndegree = 4: Degree of the B-spline. Must be at least one order higher than the highest order partial derivative.\norderTime = 1: Order of the highest order temporal derivative (default ∂U_t)\norderSpace = 3: Order of the highest order spatial derivative (default ∂Uxxx and ∂Uyyy)\nlatent_dim = size(Y, 3): Dimension of the latent space. Default is same as data dimension.\ncovariates = nothing: Additional covariates.\nnits = 2000: Number of samples for the Gibbs sampler.\nburnin = nits / 2: Number of samples to discard as burnin (default is half of nits).\nlearning_rate_end = learning_rate: End learning rate (default is same as initial learning rate).\n\n\n\n\n\n","category":"method"},{"location":"api/#BayesianDiscovery.bspline-NTuple{4, Any}","page":"API","title":"BayesianDiscovery.bspline","text":"bspline(x, knot_locs, degree, derivative)\n\nCreates a matrix of B-Splines evaluated at each x with specified knot locations and degree. Dimension is (length(x), length(xknotlocs)). Returns the basis matrix and the derivative of the basis matrix.\n\nArguments\n\nx: data\nknot_locs: knot locations\ndegree: degree of the B-Spline\nderivative: order of the derivative for Psi_x\n\nExamples\n\nx = 1:1:30\nknot_locs = 5:5:25\ndegree = 3\nderivative = 1\n\nPsi, Psi_x = bspline(x, knot_locs, degree, derivative)\n\n\n\n\n\n","category":"method"},{"location":"api/#BayesianDiscovery.create_pars-Tuple{Array{Float64, 3}, Vector, Vector, Vector{Int64}, Int64, Int64, Int64, Vector{Float64}, Float64, Function, Function, Vector{String}, Vector{String}}","page":"API","title":"BayesianDiscovery.create_pars","text":"create_pars()\n\nConstructs the parameter and model classes.\n\nArguments\n\nY::Array{Float64, 3}: Space x Time x Component data array\nSpaceStep::Vector{StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}: Vector of spatial locations [x, y]\nTimeStep::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}: Time samples\nνS::Vector{Int32}: number of spatial basis functions [x, y]\nνT::Int: number of temporal basis functions\nbufferSpace::Vector{Int}: spatial buffer [x, y]\nbufferTime::Int: temporal buffer\nbatchSpace::Int: batch size for space [x, y]\nbatchTime::Int: batch size for time\nlearning_rate::Float64: learning rate\nv0::Float64: ssvs not included variance\nv1::Float64: ssvs included variance\nΛ::Function: function library\nΛnames::Vector{String}: names of arguments in function library\n\n\n\n\n\n","category":"method"},{"location":"api/#BayesianDiscovery.fold3-NTuple{4, Any}","page":"API","title":"BayesianDiscovery.fold3","text":"fold3(Y)\n\nUsed to construct a tensor from the mode-3 matrix Y.\n\nExamples\n\nY3 = unfold3(Y) I = size(Y, 1) J = size(Y, 2) K = size(Y, 3)\n\nY = fold3(Y3, I, J, K)\n\n\n\n\n\n","category":"method"},{"location":"api/#BayesianDiscovery.spatial_bspline-NTuple{7, Any}","page":"API","title":"BayesianDiscovery.spatial_bspline","text":"spatial_bspline(x, y, x_knot_locs, y_knot_locs, degree)\n\nCreates a matrix of B-Splines evaluated at each x and y with specified knot locations and degree. Dimension is (length(x)length(y), length(xknotlocs)length(yknotlocs)). Returns the basis matrix and the derivative of the basis matrix.\n\nArguments\n\nx: data in the x direction\ny: data in the x direction\nxknotlocs: knot locations for x\nyknotlocs: knot locations for y\ndegree: degree of the B-Spline\n\nExamples\n\nx = 1:1:30\ny = 1:1:30\nx_knot_locs = 5:5:25\ny_knot_locs = 5:5:25\ndegree = 3\n\nPsi, Psi_x, Psi_y, Psi_xy = spatial_bspline(x, y, x_knot_locs, y_knot_locs, degree)\n\n# plot the functions\nPlots.pyplot()\ncontour(x, y, reshape(Psi, length(x), length(y)), fill = true)\ncontour(x, y, reshape(Psi_x, length(x), length(y)), fill = true)\ncontour(x, y, reshape(Psi_y, length(x), length(y)), fill = true)\ncontour(x, y, reshape(Psi_xy, length(x), length(y)), fill = true)\n\n\n\n\n\n","category":"method"},{"location":"api/#BayesianDiscovery.tensor_mult-NTuple{4, Any}","page":"API","title":"BayesianDiscovery.tensor_mult","text":"tensor_mult(G, A, B, C)\n\nUsed to multiply a tensor G ∈ R(I1, I2, I3) with matrices A ∈ R(P, I1), B ∈ R(Q, I2), C ∈ R(R, I3)\n\n\n\n\n\n","category":"method"},{"location":"api/#BayesianDiscovery.unfold3-Tuple{Array{Float64, 3}}","page":"API","title":"BayesianDiscovery.unfold3","text":"unfold3(Y)\n\nUsed to get the mode-3 matrix of the tensor Y.\n\n\n\n\n\n","category":"method"},{"location":"api/#BayesianDiscovery.update_A!-Tuple{Any, Any}","page":"API","title":"BayesianDiscovery.update_A!","text":"update_A!(pars)\n\nUsed within DEtection() function with a spike-and-slab prior. Updates 𝐀 with the elastic net prior (Li 2010) from\n\n𝐳(𝐬 t) = ℋ(𝐬t) 𝚯 𝐀 (𝛗phi_t^(0)(t)  𝛙(𝐬)) + 𝛜(𝐬 t)\n\n𝚯 𝐀 (𝛗_t^(i)(t)  g(𝛙(𝐬))) = 𝐌 𝐟() + 𝛈(𝐬 t) \n\np(𝐀)  exp-λ₁𝐀₁ - λ₂𝐀₂²\n\nusing Stochastic Gradient Desent with a Constant Learning Rate (Mandt 2016). λ₁ and λ₂ are set to 1/100.\n\n\n\n\n\n","category":"method"},{"location":"api/#BayesianDiscovery.update_M!-Tuple{Any, Any}","page":"API","title":"BayesianDiscovery.update_M!","text":"update_M!(pars)\n\nUsed within DEtection() function with a spike-and-slab prior. Updates 𝐌 and 𝚺ᵤ from \n\n𝚯 𝐀 (𝛗_t^(i)(t)  g(𝛙(𝐬))) = 𝐌 𝐟() + 𝛈(𝐬 t) \n\nwhere 𝛈(𝐬 t)  N_N(0 𝚺ᵤ)and 𝚺ᵤ = diag(σ²ᵤ1  σ²ᵤN)\n\n\n\n\n\n","category":"method"},{"location":"api/#BayesianDiscovery.update_gamma!-Tuple{Any, Any}","page":"API","title":"BayesianDiscovery.update_gamma!","text":"update_gamma!(pars)\n\nUsed within DEtection() function with a spike-and-slab prior. Updates gamma and pi from the spike-and-slab prior from\n\np(𝐌 𝛄) = p-slab(𝐌 ᵧ)ⱼ p-spike(Mⱼ)\n\nwhere p(γⱼ = 1 π) = π, π  ℬ(a b), p-slab(𝐌 ᵧ) = N(𝐌 ᵧ 𝐚ᵧ 𝚺ᵤ𝐀ᵧ), and 𝐀ᵧ = c𝐈.\n\n\n\n\n\n","category":"method"},{"location":"api/#BayesianDiscovery.update_ΣZ!-Tuple{Any, Any}","page":"API","title":"BayesianDiscovery.update_ΣZ!","text":"update_ΣZ!(pars)\n\nUsed within DEtection() function with a spike-and-slab prior. Updates 𝚺z from \n\n𝐳(𝐬 t) = ℋ(𝐬t) 𝚯 𝐀 (𝛗phi_t^(0)(t)  𝛙(𝐬)) + 𝛜(𝐬 t)\n\nwhere 𝛜(𝐬 t)  N_N(0 𝚺z), 𝚺z = diag(σ²z1  σ²zm), and σ²z  Half-t().\n\n\n\n\n\n","category":"method"},{"location":"api/#BayesianDiscovery.ΔL-Tuple{Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Matrix{Float64}}","page":"API","title":"BayesianDiscovery.ΔL","text":"ΔL(z, H, ψ, gψ, ϕ, ϕ_t, Θ, ΣZinv, ΣUinv, A, M, fcurr, fprime)\n\nUsed within DEtection() function. Calculates the gradient of the log likelihood.\n\n\n\n\n\n","category":"method"},{"location":"heat/","page":"Heat Equation","title":"Heat Equation","text":"CurrentModule = BayesianDiscovery","category":"page"},{"location":"heat/#Heat-Example","page":"Heat Equation","title":"Heat Example","text":"","category":"section"},{"location":"heat/","page":"Heat Equation","title":"Heat Equation","text":"This will be an example","category":"page"},{"location":"reactiondiffusion/","page":"Reaction Diffusion","title":"Reaction Diffusion","text":"CurrentModule = BayesianDiscovery","category":"page"},{"location":"reactiondiffusion/#Reaction-Diffusion-Example","page":"Reaction Diffusion","title":"Reaction Diffusion Example","text":"","category":"section"},{"location":"reactiondiffusion/","page":"Reaction Diffusion","title":"Reaction Diffusion","text":"This will be an example","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = BayesianDiscovery","category":"page"},{"location":"#BayesianDiscovery","page":"Home","title":"BayesianDiscovery","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for BayesianDiscovery.","category":"page"},{"location":"burgers/","page":"Burgers Equation","title":"Burgers Equation","text":"CurrentModule = BayesianDiscovery","category":"page"},{"location":"burgers/#Burgers-Example","page":"Burgers Equation","title":"Burgers Example","text":"","category":"section"},{"location":"burgers/","page":"Burgers Equation","title":"Burgers Equation","text":"This will be an example","category":"page"}]
}
